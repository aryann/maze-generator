#!/usr/bin/env python
import cStringIO
import random
import os


_RIGHT_WALL = 0b01
_BOTTOM_WALL = 0b10
_BOTH_WALLS = _RIGHT_WALL | _BOTTOM_WALL


class _Groups(object):

    def __init__(self, num_members):
        self.groups = range(num_members)

    def _FindGroupId(self, member_id):
        if not (0 <= member_id < len(self.groups)):
            raise ValueError(
                'member_id must be in the range [0, {0}]; received: {1}'
                .format(len(self.groups) - 1, member_id))

        if self.groups[member_id] == member_id:
            return member_id
        else:
            group_id = self._FindGroupId(self.groups[member_id])
            self.groups[member_id] = group_id
            return group_id

    def Unionize(self, member_id_a, member_id_b):
        group_a = self._FindGroupId(member_id_a)
        group_b = self._FindGroupId(member_id_b)
        if group_a < group_b:
            self.groups[group_b] = group_a
        elif group_b < group_a:
            self.groups[group_a] = group_b

    def InSameGroup(self, member_id_a, member_id_b):
        return self._FindGroupId(member_id_a) == self._FindGroupId(member_id_b)


class Maze(object):

    def __init__(self, n):
        if n < 1:
            raise ValueError(
                'the dimensions of the maze must be positive; received: {0}'
                .format(n))

        self.maze = []
        self.n = n
        for _ in xrange(n):
            self.maze.append([_BOTH_WALLS] * n)

        # Removes the right wall from the exit cell.
        self.maze[n - 1][n - 1] = _BOTTOM_WALL

        self.groups = _Groups(n * n)
        self.start_group_id = 0
        self.exit_group_id = n * n - 1

        while not self._StartAndExitConnected():
            self._RemoveWall()

    def _CellToGroupId(self, cell):
        """Maps a (row, col) tuple to a group ID."""
        row, col = cell
        return row * self.n + col

    def _ConnectCells(self, cell_a, cell_b):
        """Marks cell_a and cell_b as connected."""
        group_a = self._CellToGroupId(cell_a)
        group_b = self._CellToGroupId(cell_b)
        self.groups.Unionize(group_a, group_b)

    def _StartAndExitConnected(self):
        """Returns True if the start and exit cells can be reached from one
        another."""
        return self.groups.InSameGroup(self.start_group_id, self.exit_group_id)

    def _RemoveWall(self):
        row = random.randint(0, self.n - 1)
        col = random.randint(0, self.n - 1)

        # We don't want to remove walls that are part of the right or
        # bottom border. We also want to make sure that the
        # probability of an internal wall being removed is uniform
        # among all walls.

        # If the cell is neither in the bottom-most row nor in the
        # right-most column, we can go ahead and pick between removing
        # either a right wall or a bottom wall.
        if row != self.n - 1 and col != self.n - 1:
            wall_to_remove = random.choice([_RIGHT_WALL, _BOTTOM_WALL])

        # If the cell is the exit cell, then the right and bottom walls
        # are both part of the border, so we should not remove them.
        elif row == self.n - 1 and col == self.n - 1:
            wall_to_remove = None

        # If the cell is in the bottom row, then either remove a right
        # wall or do nothing.
        elif row == self.n - 1:
            wall_to_remove = random.choice([_RIGHT_WALL, None])

        # Similar to the above condition, except for the right-most column.
        elif col == self.n - 1:
            wall_to_remove = random.choice([_BOTTOM_WALL, None])

        if wall_to_remove:
            this_cell = (row, col)
            if wall_to_remove == _RIGHT_WALL:
                neighbor = (row, col + 1)
            else:
                neighbor = (row + 1, col)

            self._ConnectCells(this_cell, neighbor)
            self.maze[row][col] = self.maze[row][col] & ~wall_to_remove

    def __str__(self):
        """Returns a string representation of the maze."""
        buf = cStringIO.StringIO()
        for _ in self.maze[0]:
            buf.write('+')
            buf.write('--')
        buf.write('+')
        buf.write(os.linesep)
        for i, row in enumerate(self.maze):
            if i == 0:  # Don't add a left wall for the start cell.
                buf.write(' ')
            else:
                buf.write('|')

            for cell in row:
                buf.write('  ')
                if cell & _RIGHT_WALL:
                    buf.write('|')
                else:
                    buf.write(' ')
            buf.write(os.linesep)
            buf.write('+')
            for cell in row:
                if cell & _BOTTOM_WALL:
                    buf.write('--')
                else:
                    buf.write('  ')
                buf.write('+')
            buf.write(os.linesep)
        return buf.getvalue()


if __name__ == '__main__':
    maze = Maze(10)
    print maze
